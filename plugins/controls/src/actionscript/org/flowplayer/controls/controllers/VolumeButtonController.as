/* * Author: Thomas Dubois, <thomas _at_ flowplayer org> * This file is part of Flowplayer, http://flowplayer.org * * Copyright (c) 2011 Flowplayer Ltd * * Released under the MIT License: * http://www.opensource.org/licenses/mit-license.php */package org.flowplayer.controls.controllers {    	import org.flowplayer.controls.Controlbar;	import org.flowplayer.controls.SkinClasses;	import org.flowplayer.model.ClipEvent;		import org.flowplayer.ui.controllers.AbstractButtonController;	import org.flowplayer.ui.buttons.ButtonEvent;	import org.flowplayer.view.Flowplayer;	import flash.display.DisplayObjectContainer;	import org.flowplayer.ui.buttons.VolumeTooltipButton;	import org.flowplayer.ui.buttons.TooltipButtonConfig;	import org.flowplayer.ui.buttons.VolumeToggleButton;	import flash.external.*;		public class VolumeButtonController extends AbstractButtonController {				public function VolumeButtonController() {			super();						ExternalInterface.addCallback("sendVolumeType", volumeSetFromJS);		}				override protected function createWidget():void {						var lowButton:VolumeTooltipButton = new VolumeTooltipButton( 												new lowFaceClass(), 												_config as TooltipButtonConfig, 												_player.animationEngine);            setAccessible(lowButton, "volume-low");																		var mediumButton:VolumeTooltipButton = new VolumeTooltipButton(												new mediumFaceClass(), 												_config as TooltipButtonConfig, 												_player.animationEngine);            setAccessible(mediumButton,  "volume-medium");									var highButton:VolumeTooltipButton = new VolumeTooltipButton(												new highFaceClass(), 												_config as TooltipButtonConfig, 												_player.animationEngine);            setAccessible(highButton,  "volume-high");									var muteButton:VolumeTooltipButton = new VolumeTooltipButton(												new muteFaceClass(), 												_config as TooltipButtonConfig, 												_player.animationEngine);            setAccessible(muteButton,  "volume-mute");						_widget = new VolumeToggleButton(lowButton, mediumButton,highButton,muteButton);					}				override public function get name():String {			return "Volume";		}				override public function get defaults():Object {			return {				tooltipEnabled: false,				tooltipLabel: "Volume",				visible: true,				enabled: true			};		}		public function get lowFaceClass():Class {			return SkinClasses.getClass("fp.VolumeLowButton");		}				public function get mediumFaceClass():Class {			return SkinClasses.getClass("fp.VolumeMediumButton");		}				public function get highFaceClass():Class {			return SkinClasses.getClass("fp.VolumeHighButton");		}				public function get muteFaceClass():Class {			return SkinClasses.getClass("fp.VolumeMuteButton");		}				override protected function onButtonClicked(event:ButtonEvent):void {			ExternalInterface.call("thaitv.thaiTVVolumeMute");		}				private function volumeSetFromJS(volumeType:Number):void {            (_widget as VolumeToggleButton).volumeType = volumeType;        }	}}