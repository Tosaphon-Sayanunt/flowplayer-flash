/* * Author: Thomas Dubois, <thomas _at_ flowplayer org> * This file is part of Flowplayer, http://flowplayer.org * * Copyright (c) 2011 Flowplayer Ltd * * Released under the MIT License: * http://www.opensource.org/licenses/mit-license.php */package org.flowplayer.menu.ui {    import flash.display.DisplayObject;    import org.flowplayer.util.GraphicsUtil;    import org.flowplayer.view.AbstractSprite;        import org.flowplayer.ui.buttons.ConfigurableWidget;    import org.flowplayer.ui.buttons.TooltipButtonConfig;	public class BitrateToggleButton extends ConfigurableWidget {		protected var _normalButton:ConfigurableWidget;		protected var _hdButton:ConfigurableWidget;		protected var _currentType:Number;		public function BitrateToggleButton(normal:ConfigurableWidget, hd:ConfigurableWidget) {			_normalButton = normal;			_hdButton= hd;			//normal = 1, hd = 2						bitrateType = 1;//set default to medium		}		override public function addEventListener(type:String, listener:Function, useCapture:Boolean  = false, priority:int  = 0, useWeakReference:Boolean  = false):void {			_normalButton.addEventListener(type, listener, useCapture, priority, useWeakReference);			_hdButton.addEventListener(type, listener, useCapture, priority, useWeakReference);		}		override public function removeEventListener(type:String, listener:Function, useCapture:Boolean  = false):void {			_normalButton.removeEventListener(type, listener, useCapture);			_hdButton.removeEventListener(type, listener, useCapture);		}				override public function get name():String {			return "Bitrate";		}		override protected function onResize():void {			_normalButton.setSize(_width, _height);			_hdButton.setSize(_width, _height);        }		override public function configure(config:Object):void {			var tooltipConfig:TooltipButtonConfig = config as TooltipButtonConfig;			_normalButton.configure(tooltipConfig);			_hdButton.configure(tooltipConfig);		}				override public function set enabled(value:Boolean) :void {			_normalButton.enabled = value;			_hdButton.enabled = value;		}				override public function get enabled():Boolean {			return activeButton.enabled;		}				public function get activeButton():ConfigurableWidget {			switch(_currentType) {				case 1: return _normalButton;				case 2: return _hdButton;				default: return _normalButton;			}		}				public function get bitrateType():Number {			return _currentType;		}		public function set bitrateType(bType:Number):void {			if (_currentType == bType) return;			if ( contains(activeButton) ) removeChild(activeButton);			_currentType = bType;			addChild(activeButton);		}	}}