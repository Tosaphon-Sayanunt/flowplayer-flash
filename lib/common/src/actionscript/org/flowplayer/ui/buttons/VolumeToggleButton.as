/* * Author: Thomas Dubois, <thomas _at_ flowplayer org> * This file is part of Flowplayer, http://flowplayer.org * * Copyright (c) 2011 Flowplayer Ltd * * Released under the MIT License: * http://www.opensource.org/licenses/mit-license.php */package org.flowplayer.ui.buttons {    import flash.display.DisplayObject;    import org.flowplayer.util.GraphicsUtil;    import org.flowplayer.view.AbstractSprite;	public class VolumeToggleButton extends ConfigurableWidget {		protected var _lowButton:ConfigurableWidget;		protected var _mediumButton:ConfigurableWidget;		protected var _highButton:ConfigurableWidget;		protected var _muteButton:ConfigurableWidget;		protected var _currentType:Number;		public function VolumeToggleButton(low:ConfigurableWidget, medium:ConfigurableWidget, high:ConfigurableWidget, mute:ConfigurableWidget) {			_lowButton = low;			_mediumButton= medium;			_highButton = high;			_muteButton = mute;			//low = 1, medium = 2, high = 3, mute = 0						volumeType = 2;//set default to medium		}		override public function addEventListener(type:String, listener:Function, useCapture:Boolean  = false, priority:int  = 0, useWeakReference:Boolean  = false):void {			_lowButton.addEventListener(type, listener, useCapture, priority, useWeakReference);			_mediumButton.addEventListener(type, listener, useCapture, priority, useWeakReference);			_highButton.addEventListener(type, listener, useCapture, priority, useWeakReference);			_muteButton.addEventListener(type, listener, useCapture, priority, useWeakReference);		}		override public function removeEventListener(type:String, listener:Function, useCapture:Boolean  = false):void {			_lowButton.removeEventListener(type, listener, useCapture);			_mediumButton.removeEventListener(type, listener, useCapture);			_highButton.removeEventListener(type, listener, useCapture);			_muteButton.removeEventListener(type, listener, useCapture);		}				override public function get name():String {			return "Volume";		}		override protected function onResize():void {			_lowButton.setSize(_width, _height);			_mediumButton.setSize(_width, _height);			_highButton.setSize(_width, _height);			_muteButton.setSize(_width, _height);        }		override public function configure(config:Object):void {			var tooltipConfig:TooltipButtonConfig = config as TooltipButtonConfig;			_lowButton.configure(tooltipConfig);			_mediumButton.configure(tooltipConfig);			_highButton.configure(tooltipConfig);			_muteButton.configure(tooltipConfig);		}				override public function set enabled(value:Boolean) :void {			_lowButton.enabled = value;			_mediumButton.enabled = value;			_highButton.enabled = value;			_muteButton.enabled = value;		}				override public function get enabled():Boolean {			return activeButton.enabled;		}				public function get activeButton():ConfigurableWidget {			switch(_currentType) {				case 0: return _muteButton;				case 1: return _lowButton;				case 2: return _mediumButton;				case 3: return _highButton;				default: return _mediumButton;						}		}				public function get volumeType():Number {			return _currentType;		}		public function set volumeType(volType:Number):void {			if (_currentType == volType) return;			if ( contains(activeButton) ) removeChild(activeButton);			_currentType = volType;			addChild(activeButton);		}	}}