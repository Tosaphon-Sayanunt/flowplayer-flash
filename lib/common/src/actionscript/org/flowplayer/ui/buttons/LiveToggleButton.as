/* * Author: Thomas Dubois, <thomas _at_ flowplayer org> * This file is part of Flowplayer, http://flowplayer.org * * Copyright (c) 2011 Flowplayer Ltd * * Released under the MIT License: * http://www.opensource.org/licenses/mit-license.php */package org.flowplayer.ui.buttons {    import flash.display.DisplayObject;    import org.flowplayer.util.GraphicsUtil;    import org.flowplayer.view.AbstractSprite;	public class LiveToggleButton extends ConfigurableWidget {		protected var _liveButton:ConfigurableWidget;		protected var _dvrButton:ConfigurableWidget;		protected var _currentType:Number;		public function LiveToggleButton(live:ConfigurableWidget, dvr:ConfigurableWidget) {			_liveButton = live;			_dvrButton= dvr;			//dvr = 1, live = 2						buttonType = 1;//set default to dvr		}		override public function addEventListener(type:String, listener:Function, useCapture:Boolean  = false, priority:int  = 0, useWeakReference:Boolean  = false):void {			_liveButton.addEventListener(type, listener, useCapture, priority, useWeakReference);			_dvrButton.addEventListener(type, listener, useCapture, priority, useWeakReference);		}		override public function removeEventListener(type:String, listener:Function, useCapture:Boolean  = false):void {			_liveButton.removeEventListener(type, listener, useCapture);			_dvrButton.removeEventListener(type, listener, useCapture);		}				override public function get name():String {			return "Live";		}		override protected function onResize():void {			_liveButton.setSize(_width, _height);			_dvrButton.setSize(_width, _height);        }		override public function configure(config:Object):void {			var tooltipConfig:TooltipButtonConfig = config as TooltipButtonConfig;			_liveButton.configure(tooltipConfig);			_dvrButton.configure(tooltipConfig);		}				override public function set enabled(value:Boolean) :void {			_liveButton.enabled = value;			_dvrButton.enabled = value;		}				override public function get enabled():Boolean {			return activeButton.enabled;		}				public function get activeButton():ConfigurableWidget {			switch(_currentType) {				case 1: return _dvrButton;				case 2: return _liveButton;				default: return _dvrButton;			}		}				public function get buttonType():Number {			return _currentType;		}		public function set buttonType(bType:Number):void {			if (_currentType == bType) return;			if ( contains(activeButton) ) removeChild(activeButton);			_currentType = bType;			addChild(activeButton);		}	}}